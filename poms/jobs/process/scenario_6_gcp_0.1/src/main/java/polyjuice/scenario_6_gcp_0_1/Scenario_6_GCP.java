// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package polyjuice.scenario_6_gcp_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Scenario_6_GCP Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Scenario_6_GCP implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (gcp_accesskey != null) {

				this.setProperty("gcp_accesskey", gcp_accesskey.toString());

			}

			if (gcp_bucket != null) {

				this.setProperty("gcp_bucket", gcp_bucket.toString());

			}

			if (gcp_dataset != null) {

				this.setProperty("gcp_dataset", gcp_dataset.toString());

			}

			if (gcp_file != null) {

				this.setProperty("gcp_file", gcp_file.toString());

			}

			if (gcp_localfile != null) {

				this.setProperty("gcp_localfile", gcp_localfile.toString());

			}

			if (gcp_projectid != null) {

				this.setProperty("gcp_projectid", gcp_projectid.toString());

			}

			if (gcp_secretkey != null) {

				this.setProperty("gcp_secretkey", gcp_secretkey.toString());

			}

			if (gcp_servicefile != null) {

				this.setProperty("gcp_servicefile", gcp_servicefile.toString());

			}

			if (gcp_table != null) {

				this.setProperty("gcp_table", gcp_table.toString());

			}

			if (td_db != null) {

				this.setProperty("td_db", td_db.toString());

			}

			if (td_host != null) {

				this.setProperty("td_host", td_host.toString());

			}

			if (td_pwd != null) {

				this.setProperty("td_pwd", td_pwd.toString());

			}

			if (td_table != null) {

				this.setProperty("td_table", td_table.toString());

			}

			if (td_user != null) {

				this.setProperty("td_user", td_user.toString());

			}

		}

		public String gcp_accesskey;

		public String getGcp_accesskey() {
			return this.gcp_accesskey;
		}

		public String gcp_bucket;

		public String getGcp_bucket() {
			return this.gcp_bucket;
		}

		public String gcp_dataset;

		public String getGcp_dataset() {
			return this.gcp_dataset;
		}

		public String gcp_file;

		public String getGcp_file() {
			return this.gcp_file;
		}

		public String gcp_localfile;

		public String getGcp_localfile() {
			return this.gcp_localfile;
		}

		public String gcp_projectid;

		public String getGcp_projectid() {
			return this.gcp_projectid;
		}

		public String gcp_secretkey;

		public String getGcp_secretkey() {
			return this.gcp_secretkey;
		}

		public String gcp_servicefile;

		public String getGcp_servicefile() {
			return this.gcp_servicefile;
		}

		public String gcp_table;

		public String getGcp_table() {
			return this.gcp_table;
		}

		public String td_db;

		public String getTd_db() {
			return this.td_db;
		}

		public String td_host;

		public String getTd_host() {
			return this.td_host;
		}

		public java.lang.String td_pwd;

		public java.lang.String getTd_pwd() {
			return this.td_pwd;
		}

		public String td_table;

		public String getTd_table() {
			return this.td_table;
		}

		public String td_user;

		public String getTd_user() {
			return this.td_user;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Scenario_6_GCP";
	private final String projectName = "POLYJUICE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Scenario_6_GCP.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Scenario_6_GCP.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tContextLoad_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBigQueryInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBigQueryInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBigQueryInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_POLYJUICE_Scenario_6_GCP = new byte[0];
		static byte[] commonByteArray_POLYJUICE_Scenario_6_GCP = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_POLYJUICE_Scenario_6_GCP.length) {
					if (length < 1024 && commonByteArray_POLYJUICE_Scenario_6_GCP.length == 0) {
						commonByteArray_POLYJUICE_Scenario_6_GCP = new byte[1024];
					} else {
						commonByteArray_POLYJUICE_Scenario_6_GCP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_POLYJUICE_Scenario_6_GCP, 0, length);
				strReturn = new String(commonByteArray_POLYJUICE_Scenario_6_GCP, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_POLYJUICE_Scenario_6_GCP) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:ens2EOx6aIUggjdEpwfZzsBXozRomgpM9gwVYw==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "C:/Users/daparti.chowdary/OneDrive - Mphasis/Desktop/TAC/context.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							row3 = null;
							int tempRowLength_tFileInputExcel_1 = 2;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "key";

									row3.key = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
								} else {
									row3.key = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "value";

									row3.value = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
								} else {
									row3.value = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tContextLoad_1 main ] start
								 */

								currentComponent = "tContextLoad_1";

								//////////////////////////
								String tmp_key_tContextLoad_1 = null;
								String key_tContextLoad_1 = null;
								if (row3.key != null) {
									tmp_key_tContextLoad_1 = row3.key.trim();
									if ((tmp_key_tContextLoad_1.startsWith("#")
											|| tmp_key_tContextLoad_1.startsWith("!"))) {
										tmp_key_tContextLoad_1 = null;
									} else {
										row3.key = tmp_key_tContextLoad_1;
									}
								}
								if (row3.key != null) {
									key_tContextLoad_1 = row3.key;
								}
								String value_tContextLoad_1 = null;
								if (row3.value != null) {
									value_tContextLoad_1 = row3.value;
								}

								String currentValue_tContextLoad_1 = value_tContextLoad_1;

								if ((key_tContextLoad_1 != null) && ("td_pwd".equals(key_tContextLoad_1)))
									currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

								if (tmp_key_tContextLoad_1 != null) {
									try {
										if (key_tContextLoad_1 != null && "gcp_accesskey".equals(key_tContextLoad_1)) {
											context.gcp_accesskey = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "gcp_bucket".equals(key_tContextLoad_1)) {
											context.gcp_bucket = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "gcp_dataset".equals(key_tContextLoad_1)) {
											context.gcp_dataset = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "gcp_file".equals(key_tContextLoad_1)) {
											context.gcp_file = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "gcp_localfile".equals(key_tContextLoad_1)) {
											context.gcp_localfile = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "gcp_projectid".equals(key_tContextLoad_1)) {
											context.gcp_projectid = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "gcp_secretkey".equals(key_tContextLoad_1)) {
											context.gcp_secretkey = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "gcp_servicefile".equals(key_tContextLoad_1)) {
											context.gcp_servicefile = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "gcp_table".equals(key_tContextLoad_1)) {
											context.gcp_table = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "td_db".equals(key_tContextLoad_1)) {
											context.td_db = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "td_host".equals(key_tContextLoad_1)) {
											context.td_host = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "td_pwd".equals(key_tContextLoad_1)) {
											context.td_pwd = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "td_table".equals(key_tContextLoad_1)) {
											context.td_table = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null && "td_user".equals(key_tContextLoad_1)) {
											context.td_user = value_tContextLoad_1;
										}

										if (context.getProperty(key_tContextLoad_1) != null) {
											assignList_tContextLoad_1.add(key_tContextLoad_1);
										} else {
											newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
										}
										if (value_tContextLoad_1 == null) {
											context.setProperty(key_tContextLoad_1, "");
										} else {
											context.setProperty(key_tContextLoad_1, value_tContextLoad_1);
										}
									} catch (java.lang.Exception e) {
										System.err.println("Setting a value for the key \"" + key_tContextLoad_1
												+ "\" has failed. Error message: " + e.getMessage());
									}
									nb_line_tContextLoad_1++;
								}
								//////////////////////////

								tos_count_tContextLoad_1++;

								/**
								 * [tContextLoad_1 main ] stop
								 */

								/**
								 * [tContextLoad_1 process_data_begin ] start
								 */

								currentComponent = "tContextLoad_1";

								/**
								 * [tContextLoad_1 process_data_begin ] stop
								 */

								/**
								 * [tContextLoad_1 process_data_end ] start
								 */

								currentComponent = "tContextLoad_1";

								/**
								 * [tContextLoad_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1,
						newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1,
						noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				parametersToEncrypt_tContextLoad_1.add("td_pwd");

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "", "", "",
						"", resumeUtil.convertToJsonText(context, parametersToEncrypt_tContextLoad_1));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tBigQueryInput_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_POLYJUICE_Scenario_6_GCP = new byte[0];
		static byte[] commonByteArray_POLYJUICE_Scenario_6_GCP = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer age;

		public Integer getAge() {
			return this.age;
		}

		public java.util.Date dob;

		public java.util.Date getDob() {
			return this.dob;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_POLYJUICE_Scenario_6_GCP.length) {
					if (length < 1024 && commonByteArray_POLYJUICE_Scenario_6_GCP.length == 0) {
						commonByteArray_POLYJUICE_Scenario_6_GCP = new byte[1024];
					} else {
						commonByteArray_POLYJUICE_Scenario_6_GCP = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_POLYJUICE_Scenario_6_GCP, 0, length);
				strReturn = new String(commonByteArray_POLYJUICE_Scenario_6_GCP, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_POLYJUICE_Scenario_6_GCP) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.age = readInteger(dis);

					this.dob = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.age, dos);

				// java.util.Date

				writeDate(this.dob, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",age=" + String.valueOf(age));
			sb.append(",dob=" + String.valueOf(dob));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBigQueryInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tBigQueryInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tBigQueryInput_1 begin ] start
				 */

				ok_Hash.put("tBigQueryInput_1", false);
				start_Hash.put("tBigQueryInput_1", System.currentTimeMillis());

				currentComponent = "tBigQueryInput_1";

				int tos_count_tBigQueryInput_1 = 0;

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryInput_1;
				java.io.File credentialsFile_tBigQueryInput_1 = new java.io.File(context.gcp_servicefile);
				try (java.io.FileInputStream credentialsStream_tBigQueryInput_1 = new java.io.FileInputStream(
						credentialsFile_tBigQueryInput_1)) {
					credentials_tBigQueryInput_1 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryInput_1);
				}

				String query_tBigQueryInput_1 = "SELECT name,age,dob  FROM	\"" + context.gcp_dataset + "\".\""
						+ context.gcp_table + "\"";

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryInput_1 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryInput_1).setProjectId(context.gcp_projectid)
						.build().getService();

				com.google.cloud.bigquery.QueryJobConfiguration.Builder queryConfiguration_tBigQueryInput_1 = com.google.cloud.bigquery.QueryJobConfiguration
						.newBuilder("SELECT name,age,dob  FROM	\"" + context.gcp_dataset + "\".\"" + context.gcp_table
								+ "\"")
						.setUseLegacySql(false);

				com.google.cloud.bigquery.JobId jobId_tBigQueryInput_1 = com.google.cloud.bigquery.JobId
						.of(context.gcp_projectid, java.util.UUID.randomUUID().toString());

				com.google.cloud.bigquery.Job job_tBigQueryInput_1 = bigquery_tBigQueryInput_1.create(
						com.google.cloud.bigquery.JobInfo.newBuilder(queryConfiguration_tBigQueryInput_1.build())
								.setJobId(jobId_tBigQueryInput_1).build());

				job_tBigQueryInput_1 = job_tBigQueryInput_1.waitFor();

				if (job_tBigQueryInput_1 == null) {
					throw new RuntimeException("Job no longer exists");
				} else if (job_tBigQueryInput_1.getStatus().getError() != null) {
					throw new RuntimeException(job_tBigQueryInput_1.getStatus().getError().toString());
				}

				com.google.cloud.bigquery.TableResult result_tBigQueryInput_1 = job_tBigQueryInput_1.getQueryResults();
				// Dynamic start

				// Dynamic end
				long nb_line_tBigQueryInput_1 = 0;

				for (com.google.cloud.bigquery.FieldValueList field_tBigQueryInput_1 : result_tBigQueryInput_1
						.iterateAll()) {
					Object value_tBigQueryInput_1;
					nb_line_tBigQueryInput_1++;

					int fieldsCount_tBigQueryInput_1 = field_tBigQueryInput_1.size();
					int column_index_tBigQueryInput_1 = 0;

					column_index_tBigQueryInput_1 = 0;

					if (fieldsCount_tBigQueryInput_1 <= column_index_tBigQueryInput_1) {
						row1.name = null;
					} else {

						value_tBigQueryInput_1 = field_tBigQueryInput_1.get(column_index_tBigQueryInput_1).getValue();

						if (com.google.api.client.util.Data.isNull(value_tBigQueryInput_1))
							value_tBigQueryInput_1 = null;

						if (value_tBigQueryInput_1 != null) {

							row1.name = value_tBigQueryInput_1.toString();

						} else {
							row1.name = null;
						}
					}

					column_index_tBigQueryInput_1 = 1;

					if (fieldsCount_tBigQueryInput_1 <= column_index_tBigQueryInput_1) {
						row1.age = null;
					} else {

						value_tBigQueryInput_1 = field_tBigQueryInput_1.get(column_index_tBigQueryInput_1).getValue();

						if (com.google.api.client.util.Data.isNull(value_tBigQueryInput_1))
							value_tBigQueryInput_1 = null;

						if (value_tBigQueryInput_1 != null) {

							row1.age = ParserUtils.parseTo_Integer(value_tBigQueryInput_1.toString());

						} else {
							row1.age = null;
						}
					}

					column_index_tBigQueryInput_1 = 2;

					if (fieldsCount_tBigQueryInput_1 <= column_index_tBigQueryInput_1) {
						row1.dob = null;
					} else {

						value_tBigQueryInput_1 = field_tBigQueryInput_1.get(column_index_tBigQueryInput_1).getValue();

						if (com.google.api.client.util.Data.isNull(value_tBigQueryInput_1))
							value_tBigQueryInput_1 = null;

						if (value_tBigQueryInput_1 != null) {

							if (value_tBigQueryInput_1.toString().contains("-")) {
								row1.dob = ParserUtils.parseTo_Date(value_tBigQueryInput_1.toString(), "MM/dd/yyyy");
							} else {
								row1.dob = ParserUtils.parseTo_Date(value_tBigQueryInput_1.toString());
							}

						} else {
							row1.dob = null;
						}
					}

					/**
					 * [tBigQueryInput_1 begin ] stop
					 */

					/**
					 * [tBigQueryInput_1 main ] start
					 */

					currentComponent = "tBigQueryInput_1";

					tos_count_tBigQueryInput_1++;

					/**
					 * [tBigQueryInput_1 main ] stop
					 */

					/**
					 * [tBigQueryInput_1 process_data_begin ] start
					 */

					currentComponent = "tBigQueryInput_1";

					/**
					 * [tBigQueryInput_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

///////////////////////		

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row1.name != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row1.name));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row1.age != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row1.age));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row1.dob != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(row1.dob, "MM/dd/yyyy"));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tBigQueryInput_1 process_data_end ] start
					 */

					currentComponent = "tBigQueryInput_1";

					/**
					 * [tBigQueryInput_1 process_data_end ] stop
					 */

					/**
					 * [tBigQueryInput_1 end ] start
					 */

					currentComponent = "tBigQueryInput_1";

				}

				ok_Hash.put("tBigQueryInput_1", true);
				end_Hash.put("tBigQueryInput_1", System.currentTimeMillis());

				/**
				 * [tBigQueryInput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tBigQueryInput_1 finally ] start
				 */

				currentComponent = "tBigQueryInput_1";

				/**
				 * [tBigQueryInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBigQueryInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Scenario_6_GCP Scenario_6_GCPClass = new Scenario_6_GCP();

		int exitCode = Scenario_6_GCPClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Scenario_6_GCP.class.getClassLoader()
					.getResourceAsStream("polyjuice/scenario_6_gcp_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Scenario_6_GCP.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("gcp_accesskey", "id_String");
					context.gcp_accesskey = (String) context.getProperty("gcp_accesskey");
					context.setContextType("gcp_bucket", "id_String");
					context.gcp_bucket = (String) context.getProperty("gcp_bucket");
					context.setContextType("gcp_dataset", "id_String");
					context.gcp_dataset = (String) context.getProperty("gcp_dataset");
					context.setContextType("gcp_file", "id_String");
					context.gcp_file = (String) context.getProperty("gcp_file");
					context.setContextType("gcp_localfile", "id_String");
					context.gcp_localfile = (String) context.getProperty("gcp_localfile");
					context.setContextType("gcp_projectid", "id_String");
					context.gcp_projectid = (String) context.getProperty("gcp_projectid");
					context.setContextType("gcp_secretkey", "id_String");
					context.gcp_secretkey = (String) context.getProperty("gcp_secretkey");
					context.setContextType("gcp_servicefile", "id_String");
					context.gcp_servicefile = (String) context.getProperty("gcp_servicefile");
					context.setContextType("gcp_table", "id_String");
					context.gcp_table = (String) context.getProperty("gcp_table");
					context.setContextType("td_db", "id_String");
					context.td_db = (String) context.getProperty("td_db");
					context.setContextType("td_host", "id_String");
					context.td_host = (String) context.getProperty("td_host");
					context.setContextType("td_pwd", "id_Password");
					String pwd_td_pwd_value = context.getProperty("td_pwd");
					context.td_pwd = null;
					if (pwd_td_pwd_value != null) {
						if (context_param.containsKey("td_pwd")) {// no need to decrypt if it come from program argument
																	// or parent job runtime
							context.td_pwd = pwd_td_pwd_value;
						} else if (!pwd_td_pwd_value.isEmpty()) {
							try {
								context.td_pwd = routines.system.PasswordEncryptUtil.decryptPassword(pwd_td_pwd_value);
								context.put("td_pwd", context.td_pwd);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("td_table", "id_String");
					context.td_table = (String) context.getProperty("td_table");
					context.setContextType("td_user", "id_String");
					context.td_user = (String) context.getProperty("td_user");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("gcp_accesskey")) {
				context.gcp_accesskey = (String) parentContextMap.get("gcp_accesskey");
			}
			if (parentContextMap.containsKey("gcp_bucket")) {
				context.gcp_bucket = (String) parentContextMap.get("gcp_bucket");
			}
			if (parentContextMap.containsKey("gcp_dataset")) {
				context.gcp_dataset = (String) parentContextMap.get("gcp_dataset");
			}
			if (parentContextMap.containsKey("gcp_file")) {
				context.gcp_file = (String) parentContextMap.get("gcp_file");
			}
			if (parentContextMap.containsKey("gcp_localfile")) {
				context.gcp_localfile = (String) parentContextMap.get("gcp_localfile");
			}
			if (parentContextMap.containsKey("gcp_projectid")) {
				context.gcp_projectid = (String) parentContextMap.get("gcp_projectid");
			}
			if (parentContextMap.containsKey("gcp_secretkey")) {
				context.gcp_secretkey = (String) parentContextMap.get("gcp_secretkey");
			}
			if (parentContextMap.containsKey("gcp_servicefile")) {
				context.gcp_servicefile = (String) parentContextMap.get("gcp_servicefile");
			}
			if (parentContextMap.containsKey("gcp_table")) {
				context.gcp_table = (String) parentContextMap.get("gcp_table");
			}
			if (parentContextMap.containsKey("td_db")) {
				context.td_db = (String) parentContextMap.get("td_db");
			}
			if (parentContextMap.containsKey("td_host")) {
				context.td_host = (String) parentContextMap.get("td_host");
			}
			if (parentContextMap.containsKey("td_pwd")) {
				context.td_pwd = (java.lang.String) parentContextMap.get("td_pwd");
			}
			if (parentContextMap.containsKey("td_table")) {
				context.td_table = (String) parentContextMap.get("td_table");
			}
			if (parentContextMap.containsKey("td_user")) {
				context.td_user = (String) parentContextMap.get("td_user");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("td_pwd");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Scenario_6_GCP");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 71164 characters generated by Talend Open Studio for Data Integration on the
 * January 15, 2021 12:31:36 PM IST
 ************************************************************************************************/